diff --git a/.cmake-format.yaml b/.cmake-format.yaml
new file mode 100644
index 0000000..c5f4af4
--- /dev/null
+++ b/.cmake-format.yaml
@@ -0,0 +1,12 @@
+# Copyright (C) 2022 Roberto Rossini <roberros@uio.no>
+#
+# SPDX-License-Identifier: MIT
+bullet_char: '*'
+dangle_parens: false
+enum_char: .
+line_ending: unix
+line_width: 120
+max_pargs_hwrap: 3
+separate_ctrl_name_with_space: false
+separate_fn_name_with_space: false
+tab_size: 2
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..631e663
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,108 @@
+# Copyright (C) 2022 Roberto Rossini <roberros@uio.no>
+#
+# SPDX-License-Identifier: MIT
+
+cmake_minimum_required(VERSION 3.9)
+
+project(Chrom3D LANGUAGES CXX)
+
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE
+      "Release"
+      CACHE STRING "" FORCE)
+endif()
+
+if(NOT BUILD_SHARED_LIBS)
+  set(Boost_USE_STATIC_LIBS ON)
+endif()
+find_package(Boost 1.54.0 REQUIRED COMPONENTS filesystem random)
+
+# Try to enable IPO when compiling in Release
+if(CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
+  include(CheckIPOSupported)
+  check_ipo_supported(RESULT result OUTPUT output)
+  if(result)
+    message(STATUS "Enabling Interprocedural optimization")
+    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
+
+  else()
+    message(WARNING "Interprocedural Optimization is not supported. Disabling it!")
+    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF)
+  endif()
+endif()
+
+add_executable(Chrom3D)
+
+target_include_directories(Chrom3D PRIVATE src/ src/tclap-1.2.1/include/)
+
+target_sources(
+  Chrom3D
+  PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/Bead.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/Chrom3D.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/Chromosome.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/Constraint.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/MCMC.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/Model.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/Randomizer.cpp
+          ${CMAKE_CURRENT_SOURCE_DIR}/src/Util.cpp)
+
+target_link_libraries(Chrom3D PUBLIC m Boost::headers Boost::random)
+
+target_compile_features(Chrom3D PRIVATE cxx_std_${CMAKE_CXX_STANDARD})
+
+if(CMAKE_INTERPROCEDURAL_OPTIMIZATION)
+  set_target_properties(Chrom3D PROPERTIES INTERPROCEDURAL_OPTIMIZATION ON)
+endif()
+
+set(COMPILER_WARNINGS
+    -Wall
+    -Wextra
+    -Wsign-compare
+    -Wunused
+    -Wpedantic
+    -Wnull-dereference)
+target_compile_options(Chrom3D PRIVATE ${COMPILER_WARNINGS})
+
+# Add options to enable/disable sanitizers
+option(ENABLE_SANITIZER_ADDRESS "Enable ASAN" OFF)
+option(ENABLE_SANITIZER_ADDRESS "Enable LSAN" OFF)
+option(ENABLE_SANITIZER_UNDEFINED_BEHAVIOR "Enable UBSAN" OFF)
+
+set(SANITIZERS "")
+
+if(ENABLE_SANITIZER_ADDRESS)
+  set(SANITIZERS "address")
+endif()
+
+if(ENABLE_SANITIZER_LEAK)
+  if("${SANITIZERS}" STREQUAL "")
+    set(SANITIZERS "leak")
+  else()
+    set(SANITIZERS "${SANITIZERS},leak")
+  endif()
+endif()
+
+if(ENABLE_SANITIZER_UNDEFINED_BEHAVIOR)
+  if("${SANITIZERS}" STREQUAL "")
+    set(SANITIZERS "undefined")
+  else()
+    set(SANITIZERS "${SANITIZERS},undefined")
+  endif()
+endif()
+
+if(NOT
+   "${SANITIZERS}"
+   STREQUAL
+   "")
+  target_compile_options(Chrom3D PRIVATE -fsanitize=${SANITIZERS})
+  target_link_options(Chrom3D PRIVATE -fsanitize=${SANITIZERS})
+endif()
+
+include(GNUInstallDirs)
+
+install(TARGETS Chrom3D BUNDLE DESTINATION ${CMAKE_INSTALL_BINDIR})
+install(FILES LICENCE DESTINATION share/licenses/Chrom3D/)
diff --git a/src/Chrom3D.cpp b/src/Chrom3D.cpp
index deb6a5c..32315f7 100644
--- a/src/Chrom3D.cpp
+++ b/src/Chrom3D.cpp
@@ -11,6 +11,7 @@
 #include <math.h>
 #include <limits>
 #include <stdexcept>
+#include <string>

 #include <sstream>

@@ -191,11 +192,11 @@ int main(int argc, char** argv) {
   //model.buildHashMap();

   MCMC mcmc(model);
-  bool success;
-  uint Niter=args.nIter;
   double maxTemp = args.maxtemp;
   double coolRate = args.coolrate; // Number between 0 and 1, giving the rate of cooling at each step
   double temp=maxTemp;
+  bool success;
+  (void)success; // [[maybe_unused]]

   uint verbosity = (args.verbose == 0) ? args.nIter+1 : args.verbose;

@@ -212,7 +213,7 @@ cerr << "0 " << model.getLossScore() << endl;
     assert(success);
     if (i % verbosity == 0) {
       if(args.printStructures) {
-	model.writeCMM(args.modelName + "_iter_" + to_string(i) + ".cmm");
+	      model.writeCMM(args.modelName + "_iter_" + to_string(i) + ".cmm");
       }
       //cerr << i << " " << model.getLossScore(INTERACTION_INTRA) << " " << model.getLossScore(INTERACTION_INTER) << " " << model.getLossScore(PERIPHERY) << " " << model.getLossScore(CENTER) << " " << model.getLossScore(INTERACTION_DIST) << " " << model.getLossScore() << endl;
       cerr << i << " " << model.getLossScore() << endl;
diff --git a/src/Chromosome.h b/src/Chromosome.h
index 0fd61de..4f88baa 100644
--- a/src/Chromosome.h
+++ b/src/Chromosome.h
@@ -43,7 +43,6 @@ class Chromosome {
   friend bool operator!=(const Chromosome&, const Chromosome&);
   void setColor(double, double, double);
  private:
-  bool fixed;
   std::string name;
   //std::vector<Bead> beadList;
   boost::container::static_vector<Bead,MAXSIZE> beadList;
diff --git a/src/Model.cpp b/src/Model.cpp
index 9842585..5cc0e03 100644
--- a/src/Model.cpp
+++ b/src/Model.cpp
@@ -962,7 +962,6 @@ void Model::rescaleBeadSizes(double occupancyFactor) {
   assert(this->hasNucleus);
   vector<Chromosome>::iterator chriter;
   boost::container::static_vector<Bead,MAXSIZE>::iterator beaditer;
-  double beadVol = this->getTotalBeadVolume();
   double genomeLength = this->getTotalGenomeLength();
   for(chriter = chromosomes.begin(); chriter != chromosomes.end(); chriter++) {
     for(beaditer=chriter->begin(); beaditer!=chriter->end(); beaditer++) {
diff --git a/src/Randomizer.h b/src/Randomizer.h
index 4e738b5..358a089 100644
--- a/src/Randomizer.h
+++ b/src/Randomizer.h
@@ -24,6 +24,7 @@ class Move {
 class Randomizer {
  public:
   virtual Move randomize(Chromosome&, ENG&) = 0;
+  virtual ~Randomizer() noexcept = default;
 };


diff --git a/src/Util.h b/src/Util.h
index 0116f65..5875dd9 100644
--- a/src/Util.h
+++ b/src/Util.h
@@ -68,7 +68,7 @@ namespace util {
   class MoveException: public std::exception {
   public:
     MoveException();
-    const char* what(){return "Unacceptable move!";}
+    virtual const char* what() const noexcept {return "Unacceptable move!";}
   };

 }
