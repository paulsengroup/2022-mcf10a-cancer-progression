#!/usr/bin/env python3

# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: MIT

import argparse
import pathlib
import sys
from typing import Union

import h5py
import pandas as pd


def make_cli():
    cli = argparse.ArgumentParser()

    cli.add_argument(
        "hdf5-input",
        type=pathlib.Path,
        help="Path to the HDF5 file generated by segment_nuclei.py.",
    )

    cli.add_argument(
        "--overlap-cfx-cutoff",
        default=0.0,
        type=float,
        help="Overlap coefficient cutoff used to filter out nuclei whose shape diverges from that of an ellipsis.",
    )

    return cli


def import_blobs(grp: Union[h5py.Group, None], color: str) -> Union[pd.DataFrame, None]:
    if grp is None:
        return None

    return pd.DataFrame({"x": grp[f"{color}/x"][:], "y": grp[f"{color}/y"][:]})


def main():
    args = vars(make_cli().parse_args())
    print_header = True
    with h5py.File(args["hdf5-input"]) as h5:
        for grp in h5:
            scores = h5[f"{grp}/scores"][:]
            blob_paths = [f"{grp}/blobs/{blob}" for blob in h5[f"{grp}/blobs/"]]

            assert len(scores) == len(blob_paths)
            for blob_path, score in zip(blob_paths, scores):
                if score < args["overlap_cfx_cutoff"]:
                    continue
                blobs = import_blobs(h5[blob_path], "green")
                blobs["color"] = "green"
                blobs["cell"] = blob_path

                blobs.to_csv(sys.stdout, sep="\t", index=False, header=print_header)
                print_header = False

                blobs = import_blobs(h5[blob_path], "red")
                blobs["color"] = "red"
                blobs["cell"] = blob_path
                blobs.to_csv(sys.stdout, sep="\t", index=False, header=print_header)


if __name__ == "__main__":
    main()
