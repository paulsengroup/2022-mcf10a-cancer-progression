#!/usr/bin/env python3

# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: MIT

import argparse
import glob
import os
import sys
import warnings
from typing import Dict

import numpy as np
import pandas as pd


def make_cli():
    cli = argparse.ArgumentParser()

    cli.add_argument(
        "cnv-dir",
        type=str,
        help="Path to a folder contianing one or more .bin files with the CNV profiles generated by HiNT.",
    )
    cli.add_argument(
        "chrom-sizes",
        type=str,
        help="Path to a .chrom.sizes file with the list of chromosomes to use as reference genome.",
    )
    cli.add_argument(
        "--target-resolution",
        type=int,
        help="Resolution used to aggregate CNV profiles.\nShould be a multiple of the resolution used to call CNVs.",
    )

    return cli


def make_bin_table(chroms: Dict[str, int], resolution: int) -> pd.DataFrame:
    dfs = []

    for chrom, size in chroms.items():
        starts = np.arange(0, ((size // resolution) * resolution) + 1, resolution)
        ends = np.minimum(starts + resolution, size)

        dfs.append(pd.DataFrame({"chrom": [chrom] * len(starts), "start": starts, "end": ends}))

    return pd.concat(dfs)


def make_diploid_cnv_profile(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df["obs"] = 2.0
    return df


def import_cnv_profile(path: str, bins: pd.DataFrame) -> pd.DataFrame:
    df = pd.read_table(path)
    df["obs"] *= 2
    df["obs"] = np.maximum(df["obs"], 1)

    df["end"] += 1
    df = bins.merge(df, on=["start", "end"], how="left")
    df["obs"] = np.nan_to_num(df["obs"], nan=2.0)

    return df


def import_cnvs(cnv_dir: str, bins: pd.DataFrame, resolution: int) -> pd.DataFrame:
    dfs = []

    str_padding = len(str(bins["chrom"].nunique()))
    for i, chrom in enumerate(bins["chrom"].unique()):
        chrom_suffix = str(chrom).removeprefix("chrom").removeprefix("chr")

        if chrom_suffix.isdigit():
            pattern = os.path.join(cnv_dir, f"*.chrm_{i + 1:0{str_padding}d}.b{resolution}.bin")
        else:
            pattern = os.path.join(cnv_dir, f"*.chrm_{chrom_suffix}.b{resolution}.bin")

        files = list(glob.glob(pattern))
        if len(files) == 0:
            cnv = make_diploid_cnv_profile(bins[bins["chrom"] == chrom])
        elif len(files) == 1:
            cnv = import_cnv_profile(files[0], bins[bins["chrom"] == chrom])
        else:
            raise RuntimeError(f"Pattern '{pattern}' matched more than 1 file.")

        dfs.append(cnv)

    return pd.concat(dfs)[["chrom", "start", "end", "obs"]].rename(columns={"obs": "count"})


def bin_cnv_profile(df: pd.DataFrame, base_resolution: int, target_resolution: int) -> pd.DataFrame:
    if base_resolution == target_resolution:
        return df

    if base_resolution > target_resolution or target_resolution % base_resolution != 0:
        raise RuntimeError("--target-resolution should be a multiple of the CNV resolution")

    factor = target_resolution // base_resolution
    data = []

    with warnings.catch_warnings():
        for _, df1 in df.groupby("chrom"):
            warnings.simplefilter("ignore")
            for df2 in np.split(df1, np.arange(factor, len(df1), factor)):
                data.append([df2["chrom"].iloc[0], df2["start"].min(), df2["end"].max(), df2["count"].median()])

    return pd.DataFrame(data, columns=["chrom", "start", "end", "count"])


def main():
    args = vars(make_cli().parse_args())

    resolution = int(os.path.basename(args["cnv-dir"].rstrip("/\\")).lstrip("b"))

    chroms = pd.read_table(args["chrom-sizes"], names=["chrom", "size"]).set_index("chrom")["size"].to_dict()
    bins = make_bin_table(chroms, resolution)

    cnvs = import_cnvs(args["cnv-dir"], bins, resolution)

    if args["target_resolution"] is not None:
        cnvs = bin_cnv_profile(cnvs, resolution, args["target_resolution"])

    cnvs["count"] = cnvs["count"].astype(int)

    cnvs.to_csv(sys.stdout, sep="\t", index=False, header=False)


if __name__ == "__main__":
    main()
