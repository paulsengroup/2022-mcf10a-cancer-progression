#!/usr/bin/env python3

# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: MIT

import argparse
import logging
import os.path
import pathlib
import shutil
from typing import Union

import h5py
import numpy as np
import numpy.typing as npt
import pandas as pd
import PIL
import skimage
from PIL.Image import Image


def make_cli():
    cli = argparse.ArgumentParser()

    cli.add_argument(
        "hdf5-input",
        type=pathlib.Path,
        help="Path to the HDF5 file generated by segment_nuclei.py.",
    )

    cli.add_argument(
        "hdf5-output",
        type=pathlib.Path,
        help="Path to the output HDF5 file.",
    )

    cli.add_argument(
        "--force",
        action="store_true",
        default=False,
        help="Overwrite existing files (if any).",
    )

    cli.add_argument(
        "--threshold",
        type=float,
        default=0.1,
        help="Blob LOG threshold.",
    )
    cli.add_argument(
        "--min-sigma",
        type=float,
        default=1,
        help="Blob LOG min sigma.",
    )
    cli.add_argument(
        "--max-sigma",
        type=float,
        default=10,
        help="Blob LOG max sigma.",
    )
    cli.add_argument(
        "--num-sigma",
        type=float,
        default=10,
        help="Blob LOG num sigma.",
    )

    cli.add_argument(
        "--num-red-blobs",
        type=int,
        help="Target number of red probes.\n"
        "Blobs will be called after doing a parameter sweep, and using the combination\n"
        "of parameters that comes closest to the number of target probes.",
    )

    cli.add_argument(
        "--num-green-blobs",
        type=int,
        help="Target number of green probes.\n"
        "Blobs will be called after doing a parameter sweep, and using the combination\n"
        "of parameters that comes closest to the number of target probes.",
    )

    cli.add_argument(
        "--sharpen-radius",
        type=float,
        default=0.0,
        help="Sharpen radius.\n"
        "See https://scikit-image.org/docs/stable/api/skimage.filters.html#skimage.filters.unsharp_mask for more details.",
    )

    cli.add_argument(
        "--sharpen-amount",
        type=float,
        default=0.0,
        help="Sharpen amount.\n"
        "See https://scikit-image.org/docs/stable/api/skimage.filters.html#skimage.filters.unsharp_mask for more details.",
    )

    return cli


def import_single_image(dset: h5py.Dataset) -> PIL.Image:
    return PIL.Image.fromarray(dset[:])


def sweep_params(
    grayscale_img: npt.NDArray,
    threshold: float,
    min_sigma: float,
    max_sigma: float,
    num_sigma: int,
    tgt_num_blobs: int,
) -> pd.DataFrame:
    blobs = []
    for i, sigma in enumerate(np.linspace(max_sigma, min_sigma, num_sigma), 1):
        blobs = skimage.feature.blob_log(
            grayscale_img,
            threshold=threshold,
            min_sigma=sigma,
            max_sigma=max_sigma,
            num_sigma=i,
        )
        if len(blobs) >= tgt_num_blobs:
            break

    return blobs


def detect_blobs(
    grayscale_img: npt.NDArray,
    threshold: float,
    min_sigma: float,
    max_sigma: float,
    num_sigma: int,
    tgt_num_blobs: Union[int, None],
) -> pd.DataFrame:
    if tgt_num_blobs is None:
        blobs = skimage.feature.blob_log(
            grayscale_img,
            threshold=threshold,
            min_sigma=min_sigma,
            max_sigma=max_sigma,
            num_sigma=num_sigma,
        )
    else:
        blobs = sweep_params(
            grayscale_img,
            threshold=threshold,
            min_sigma=min_sigma,
            max_sigma=max_sigma,
            num_sigma=num_sigma,
            tgt_num_blobs=tgt_num_blobs,
        )

    return pd.DataFrame(blobs, columns=["y", "x", "radius"])


def main():
    args = vars(make_cli().parse_args())

    output = args["hdf5-output"]
    if not args["force"] and os.path.exists(output):
        raise RuntimeError(f'Refusing to overwrite output file "{output}"')

    shutil.copyfile(args["hdf5-input"], args["hdf5-output"])

    with h5py.File(output, "a") as h5:
        for grp in h5:
            paths = []
            for img_path in h5[f"{grp}/imgs/"]:
                if not img_path.startswith("000_"):
                    paths.append(img_path)

            for img_path in paths:
                logging.info(f'Processing "{grp}/imgs/{img_path}"...')
                img = import_single_image(h5[f"{grp}/imgs/{img_path}"])
                red, green, _ = img.split()

                if args["sharpen_amount"] != 0:
                    red = skimage.filters.unsharp_mask(np.array(red), args["sharpen_radius"], args["sharpen_amount"])
                    green = skimage.filters.unsharp_mask(
                        np.array(green), args["sharpen_radius"], args["sharpen_amount"]
                    )

                blobs = detect_blobs(
                    np.array(red),
                    args["threshold"],
                    args["min_sigma"],
                    args["max_sigma"],
                    args["num_sigma"],
                    args["num_red_blobs"],
                )

                logging.info(f'"{grp}/imgs/{img_path}": detected {len(blobs)} red blobs!')

                h5.create_dataset(f"{grp}/blobs/{img_path}/red/x", data=blobs["x"].to_numpy())
                h5.create_dataset(f"{grp}/blobs/{img_path}/red/y", data=blobs["y"].to_numpy())
                h5.create_dataset(
                    f"{grp}/blobs/{img_path}/red/radius",
                    data=blobs["radius"].to_numpy(),
                )

                blobs = detect_blobs(
                    np.array(green),
                    args["threshold"],
                    args["min_sigma"],
                    args["max_sigma"],
                    args["num_sigma"],
                    args["num_green_blobs"],
                )

                logging.info(f'"{grp}/imgs/{img_path}": detected {len(blobs)} green blobs!')

                h5.create_dataset(f"{grp}/blobs/{img_path}/green/x", data=blobs["x"].to_numpy())
                h5.create_dataset(f"{grp}/blobs/{img_path}/green/y", data=blobs["y"].to_numpy())
                h5.create_dataset(
                    f"{grp}/blobs/{img_path}/green/radius",
                    data=blobs["radius"].to_numpy(),
                )

            h5[f"{grp}/blobs"].attrs["threshold"] = args["threshold"]
            h5[f"{grp}/blobs"].attrs["min_sigma"] = args["min_sigma"]
            h5[f"{grp}/blobs"].attrs["max_sigma"] = args["max_sigma"]
            h5[f"{grp}/blobs"].attrs["num_sigma"] = args["num_sigma"]
            h5[f"{grp}/blobs"].attrs["sharpen_amount"] = args["sharpen_amount"]
            h5[f"{grp}/blobs"].attrs["sharpen_radius"] = args["sharpen_radius"]


def setup_logger(level=logging.INFO):
    logging.basicConfig(format="[%(asctime)s] %(levelname)s: %(message)s")
    logging.getLogger().setLevel(level)


if __name__ == "__main__":
    setup_logger()
    main()
